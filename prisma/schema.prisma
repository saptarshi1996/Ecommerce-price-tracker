// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  firstName String
  lastName  String

  email    String @unique
  password String

  isVerified Boolean? @default(false)

  createdAt DateTime? @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  authentication UserAuthentication[]
  userProduct    UserProduct[]
  userSocket     UserSocket[]

  @@map("users")
}

model UserAuthentication {
  id Int @id @default(autoincrement())

  otp Int

  isRevoked Boolean? @default(false)

  expiresAt DateTime

  createdAt DateTime? @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("user_authentications")
}

model Site {
  id Int @id @default(autoincrement())

  name String
  icon String?

  createdAt DateTime? @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  product Product[]

  @@map("sites")
}

model Url {
  id Int @id @default(autoincrement())

  link String @db.Text

  createdAt DateTime? @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  product Product?

  @@map("urls")
}

model Product {
  id Int @id @default(autoincrement())

  name  String
  image String? @db.Text

  currentPrice Float
  lowestPrice  Float

  siteId Int
  site   Site @relation(fields: [siteId], references: [id])

  urlId Int @unique
  url   Url @relation(fields: [urlId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  userProduct UserProduct[]

  @@map("products")
}

model UserProduct {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@map("user_products")
}

model UserSocket {
  id Int @id @default(autoincrement())

  socketId String

  isActive Boolean? @default(true)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@map("user_sockets")
}
